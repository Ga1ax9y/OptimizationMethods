import numpy as np

def find_inverse_with_another_column(A_inverse, column, column_index):
    n = A_inverse.shape[0]

    l = A_inverse.dot(column)
    l_column_index = l[column_index]

    if (l_column_index == 0):
        return None

    l[column_index] = -1
    l_new = (-1 / l_column_index) * l

    Q = np.eye(n)
    Q[:, column_index] = l_new

    A_result_inverse = np.zeros((n, n))
    for i in range(n):
        for k in range(n):
            if (i == column_index):
                A_result_inverse[i, k] = l_new[i] * A_inverse[i, k]
                continue

            A_result_inverse[i, k] = A_inverse[i, k] + l_new[i] * A_inverse[column_index, k]

    return A_result_inverse


class Simplex:
    def __init__(self, code, error = None, answer = None, B_set = None):
        self.code = code
        self.error = error
        self.answer = answer
        self.B_set = B_set

def dual_simplex(c, A, b, B_init):
    _, n = A.shape
    B = B_init.copy()
    A_B_inv = None
    index_replaceble = None
    column_index_replaceble = None

    while True:
        # 1 –°–æ—Å—Ç–∞–≤–∏–º –±–∞–∑–∏—Å–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É A_B –∏ –Ω–∞–π–¥–µ–º –¥–ª—è –Ω–µ–µ –æ–±—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É A_B_inv
        A_B = A[:, B]

        if A_B_inv is None:
            try:
                A_B_inv = np.linalg.inv(A_B)
            except np.linalg.LinAlgError:
                return Simplex(1, "–ó–∞–¥–∞—á–∞ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–Ω–∞ (–≤—ã—Ä–æ–∂–¥–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ A_B)")
        else:
            A_B_inv = find_inverse_with_another_column(A_B_inv, A[:, column_index_replaceble], index_replaceble)

        # 2 –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä c_B, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–µ–∫—Ç–æ—Ä–∞ c —Å –±–∞–∑–∏—Å–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏.
        c_B = c[B]

        # 3 –ù–∞—Ö–æ–¥–∏–º –±–∞–∑–∏—Å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–ª–∞–Ω –¥–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ y = c_B * A_B_inv.
        y = c_B.dot(A_B_inv)

        # 4 –ù–∞—Ö–æ–¥–∏–º –ø—Å–µ–≤–¥–æ–ø–ª–∞–Ω Œ∫ = (Œ∫B,Œ∫N), —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—É—â–µ–º—É –±–∞–∑–∏—Å–Ω–æ–º—É –¥–æ–ø—É—Å—Ç–∏–º–æ–º—É –ø–ª–∞–Ω—É y, Œ∫_B = A_B_inv * b, Œ∫N = 0.
        kappa_B = A_B_inv.dot(b)
        kappa = np.zeros(n)
        kappa[B] = kappa_B

        # 5 –ï—Å–ª–∏ Œ∫ ‚©æ 0, —Ç–æ Œ∫ ‚Äî –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø—Ä—è–º–æ–π –∑–∞–¥–∞—á–∏ –∏ –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.
        if (kappa >= 0).all():
            return Simplex(0, "None", kappa, B)

        #? 6 –í—ã–¥–µ–ª–∏–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –ø—Å–µ–≤–¥–æ–ø–ª–∞–Ω–∞ Œ∫ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –µ–µ –∏–Ω–¥–µ–∫—Å. –≠—Ç–æ—Ç –∏–Ω–¥–µ–∫—Å –±–∞–∑–∏—Å–Ω—ã–π jk ‚àà B.
        negative_indices = np.where(kappa[B] < 0)[0]
        k = negative_indices[0]

        # 7 –ü—É—Å—Ç—å ‚àÜy ‚Äî —ç—Ç–æ k-—è —Å—Ç—Ä–æ–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã A_B_inv . –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞j ‚àà{1,2,...,n} \ B –≤—ã—á–∏—Å–ª–∏–º  ¬µj = ‚àÜy * Aj, –≥–¥–µ Aj ‚Äî —ç—Ç–æ j-—ã–π —Å—Ç–æ–ª–±–µ—Ü –º–∞—Ç—Ä–∏—Ü—ã A.
        delta_y = A_B_inv[k, :]
        non_B = [j for j in range(n) if j not in B]
        mu = {}
        for j in non_B:
            mu[j] = delta_y.dot(A[:, j])

        # 8 –ï—Å–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ j ‚àà {1,2,...,n}\B –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ¬µj ‚©æ 0, —Ç–æ –ø—Ä—è–º–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–Ω–∞ –∏ –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.
        if all(mu_j >= 0 for mu_j in mu.values()):
            return Simplex(1, "–ó–∞–¥–∞—á–∞ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–Ω–∞")

        """ 9 –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ j ‚àà {1,2,...,n}  B —Ç–∞–∫–æ–≥–æ, —á—Ç–æ ¬µj < 0 –≤—ã—á–∏—Å–ª–∏–º
            sigmaj = (cj -Aj‚ãÖy)/¬µj
            10 sigma0 = min{sigmaj : j ‚àà {1,2,...,n}B ‚àß ¬µj < 0}
        """
        sigma = {}
        for j in non_B:
            if mu[j] < 0:
                sigma[j] = (c[j] - A[:, j].dot(y)) / mu[j]

        j_0 = min(sigma, key=lambda x: sigma[x])

        # 11 –í –º–Ω–æ–∂–µ—Å—Ç–≤–µ B –∑–∞–º–µ–Ω–∏–º k-—ã–π –±–∞–∑–∏—Å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ –∏–Ω–¥–µ–∫—Å j0. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –®–∞–≥ 1.
        B[k] = j_0
        index_replaceble = k
        column_index_replaceble = j_0

if __name__ == "__main__":
    example_number = 0
    c = [
    np.array([-4, -3, -7, 0, 0]),
    np.array([1, 1]),
    np.array([3, 2, 0, 0])
    ]

    A = [
        np.array([
            [-2, -1, -4, 1, 0],
            [-2, -2, -2, 0, 1]
        ]),
        np.array([
            [1, 1],
            [-1, -1]
        ]),
        np.array([
            [1, 1, 1, 0],
            [1, -1, 0, -1]
        ])
    ]

    b = [
        np.array([-1, -3/2]),
        np.array([2, -3]),
        np.array([2, 4])
    ]

    B_init = [
        [3, 4],
        [0, 1],
        [2, 3]
    ]
    print("–í–µ–∫—Ç–æ—Ä c = ", c[example_number], sep=' ', end='\n\n')
    print("–ú–∞—Ç—Ä–∏—Ü–∞ A = ", A[example_number], sep=' ', end='\n\n')
    print("–í–µ–∫—Ç–æ—Ä b = ", b[example_number], sep=' ', end='\n\n')
    print("–ú–Ω–æ–∂–µ—Å—Ç–≤–æ B = ", B_init[example_number], sep=' ', end='\n\n')

    print("–û—Ç–≤–µ—Ç:", end="\n\n")
    answer = dual_simplex(c[example_number], A[example_number], b[example_number], B_init[example_number])

    if answer.code == 0:
        print("–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∑–∞–¥–∞—á–∏:")
        print("ùúÖ =", answer.answer, end='\n\n')
        print("–ë–∞–∑–∏—Å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã B =", answer.B_set, end='\n\n')
    else:
        print("–û—à–∏–±–∫–∞:", answer.error)
